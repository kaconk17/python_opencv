# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'absensi.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtCore
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QDialog, QMessageBox
from PyQt5.QtCore import QTimer, QDateTime
from PyQt5.uic import loadUi
import cv2
import numpy as np
import face_recognition
import os
import pickle
from pyzbar import pyzbar
import json
import psycopg2
from config import config


class Absensi(QDialog):
    def __init__(self, parent):
        super(Absensi, self).__init__()
        loadUi("./absensi.ui", self)
        self.timer = QtCore.QTimer(self)
        self.image = None
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.showDatetime)
        self.timer.start()
        self.qrstat = False
        self.karyawan = {}
        self.accurate = 0
        self.salah = 0
        self.defaultAwal()

    def msgBox(self, pesan,icon):
        self.msg = QMessageBox()
        self.msg.setIcon(QMessageBox.icon)
        self.msg.setText(pesan)
        self.msg.setWindowTitle("Info !")
        self.msg.setStandardButtons(QMessageBox.Ok)
        self.msg.exec_()
        
    def defaultAwal(self):
        self.labelNama.setText("")
        self.labelNik.setText("")
        self.labelMode.setText("")
        self.labelTglsukses.setText("")
    
    def getKaryawan(self,kdata):
        self.conn = None
        self.master = {}
        try:
            self.params = config()
            self.conn = psycopg2.connect(**self.params)
            self.cur = self.conn.cursor()
            self.cur.execute("""SELECT * FROM tb_karyawan WHERE nik = %s""",(kdata['nik'],))
            self.hasil = self.cur.fetchall()
            for self.r in self.hasil:
                self.master['id'] = self.r[0]
                self.master['nama'] = self.r[1]
                self.master['nik'] = self.r[2]
                self.master['face_data'] = pickle.loads(self.r[3])
            self.cur.close()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if self.conn is not None:
                self.conn.close()
        return self.master
    
    def bacaQr(self, image):
        self.imgs = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
        self.barcodes = pyzbar.decode(self.imgs)
        self.isJson = False
        for barcode in self.barcodes:
            (x, y, w, h) = barcode.rect
            self.barcodeData = barcode.data.decode("utf-8")
            self.barcodeType = barcode.type
            #self.text = "{} ({})".format(self.barcodeData, self.barcodeType)
            try:
                self.dataId = json.loads(self.barcodeData)
                self.isJson = True
            except ValueError as error:
                self.isJson = False
                

            if self.isJson:
                if self.dataId["appid"] == "017":

                    self.karyawan = self.getKaryawan(self.dataId)
                    if not self.karyawan:
                        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 0, 255), 2)
                        cv2.putText(image, "Data tidak Valid!", (x, y - 10),cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)
                        print("data salah")
                    else:
                        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
                        self.qrstat = True
                        self.labelNama.setText(self.karyawan['nama'])
                        self.labelNik.setText(self.karyawan['nik'])
                        self.labelMode.setText(self.dataId['mode'])
                        if self.dataId['mode'] == 'IN':
                            self.labelMode.setStyleSheet("background-color: green")
                        else:
                            self.labelMode.setStyleSheet("background-color: red")
                        print('Nik :', self.karyawan['nik'])
                        print('nama :', self.karyawan['nama'])
                        #print('mode :',self.karyawan['mode'])
            else:
                cv2.putText(image, "Data tidak Valid!", (x, y - 10),cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)
                #print("data salah")

    
        return image


   
    def startAbsen(self):
        if len(self.txtNama.text()) > 0:
            self.nama = self.txtNama.text().upper()
            self.startVideo("0")

    def closeEvent(self, event):
        self.vtimer.stop()
        self.capture.release()

        print("dialog window ditutup...")

    def startVideo(self, cameraName):
        if len(cameraName) == 1:
        	self.capture = cv2.VideoCapture(int(cameraName))
        else:
        	self.capture = cv2.VideoCapture(cameraName)
        self.vtimer = QTimer(self)
        self.vtimer.timeout.connect(self.updateFrame)
        self.vtimer.start(40)

    def updateFrame(self):
        ret, self.image = self.capture.read()
        self.displayImage(self.image,self.qrstat, 1)

    def faceRec(self, frame, kdata):
        imgS = cv2.resize(frame,(0,0),None,0.25,0.25)
        imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)
        facelocframe = face_recognition.face_locations(imgS)
        encodecurframe = face_recognition.face_encodings(imgS,facelocframe)
        

        for encodeface, faceloc in zip(encodecurframe, facelocframe):
            match = face_recognition.compare_faces([kdata['face_data']], encodeface,tolerance=0.40)
            face_dis = face_recognition.face_distance([kdata['face_data']], encodeface)
            
            top, right, bottom, left = faceloc
            top, right, bottom, left = top*4, right*4, bottom*4, left*4
            if face_dis < 0.40:
                self.accurate = self.accurate + 1
                cv2.rectangle(frame,(left,top),(right,bottom),(0,255,0),2)
                cv2.rectangle(frame, (left,bottom-35),(right,bottom),(0,255,0),cv2.FILLED)
                cv2.putText(frame, self.karyawan['nama'], (left+6, bottom-6),cv2.FONT_HERSHEY_COMPLEX,1,(255,255,255),2)
                if self.accurate == 20:
                    self.accurate = 0
                    id_success = self.simapnAbsen(kdata,self.dataId['mode'])
                    if not id_success:
                        self.msgBox("Gagal Simpan Data Absen",'Warning')
                        self.labelStatus.setText('Failed '+self.dataId['mode'])
                        self.labelStatus.setStyleSheet("background-color: red")
                        self.qrstat = False
                    else:
                        self.labelStatus.setText('Success '+self.dataId['mode'])
                        self.labelStatus.setStyleSheet("background-color: green")
                        self.labelTglsukses.setText(QDateTime.currentDateTime().toString('dd/MM/yyyy, hh:mm:ss'))
                        self.qrstat = False
            else:
                self.salah = self.salah + 1
                if self.salah == 20:
                    self.salah = 0
                    self.qrstat = False
                    self.defaultAwal()
                cv2.rectangle(frame,(left,top),(right,bottom),(0,0,255),2)
                cv2.rectangle(frame, (left,bottom-35),(right,bottom),(0,0,255),cv2.FILLED)
                cv2.putText(frame, "False", (left+6, bottom-6),cv2.FONT_HERSHEY_COMPLEX,1,(255,255,255),2)

                        

        return frame

    def displayImage(self, image, qr, window=1):
        image = cv2.resize(image, (640, 480))

        if qr:
            try:
                image = self.faceRec(image,self.karyawan)
            except Exception as e:
                print(e)
        else:
            try:
                image = self.bacaQr(image)
            except Exception as e:
                print(e)
        
        qformat = QImage.Format_Indexed8
        if len(image.shape) == 3:
            if image.shape[2] == 4:
                qformat = QImage.Format_RGBA8888
            else:
                qformat = QImage.Format_RGB888
               
        outImage = QImage(image, image.shape[1], image.shape[0], image.strides[0], qformat)
        outImage = outImage.rgbSwapped()

        if window == 1:
            self.label.setPixmap(QPixmap.fromImage(outImage))
            self.label.setScaledContents(True)

    def simapnAbsen(self,kdata, mode):
        waktu = QDateTime.currentDateTime().toString()
        try:
            self.params = config()
            self.conn = psycopg2.connect(**self.params)
            self.cur = self.conn.cursor()
            self.cur.execute("""INSERT INTO tb_absen(id_user, absen_mode, waktu) VALUES(%s,%s,%s) RETURNING id_absen;""",(kdata['id'], mode,waktu))
            absen_id = self.cur.fetchone()[0]
            self.conn.commit()
            self.cur.close()
        except (Exception, psycopg2.DatabaseError) as error:
            print(error)
        finally:
            if self.conn is not None:
                self.conn.close()
        print('absen tersimpan dengan ID :', absen_id)

        return absen_id

    def showDatetime(self):
        self.labelTgl.setText(QDateTime.currentDateTime().toString('dd/MM/yyyy'))
        self.labelJam.setText(QDateTime.currentDateTime().toString('hh:mm:ss'))