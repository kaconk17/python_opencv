# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'absensi.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtCore
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QDialog, QMessageBox
from PyQt5.QtCore import QTimer, QDateTime
from PyQt5.uic import loadUi
import cv2
import numpy as np
import face_recognition
import os
import pickle


class Absensi(QDialog):
    def __init__(self, parent):
        super(Absensi, self).__init__()
        loadUi("./absensi.ui", self)
        self.timer = QtCore.QTimer(self)
        self.image = None
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.showDatetime)
        self.timer.start()
        self.radioIn.setChecked(True)
        self.btnAbsen.clicked.connect(self.startAbsen)
        """
        Dialog.setObjectName("Dialog")
        Dialog.resize(521, 384)
        self.gridLayout = QtWidgets.QGridLayout(Dialog)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setMinimumSize(QtCore.QSize(350, 350))
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setMinimumSize(QtCore.QSize(0, 0))
        self.label_2.setMaximumSize(QtCore.QSize(150, 20))
        self.label_2.setStyleSheet("font: 24pt \".SF NS Text\";")
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setMaximumSize(QtCore.QSize(40, 20))
        self.label_3.setObjectName("label_3")
        self.gridLayout_2.addWidget(self.label_3, 0, 0, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout_2.addWidget(self.lineEdit, 1, 0, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout_2)
        self.btnAbsen = QtWidgets.QPushButton(Dialog)
        self.btnAbsen.setObjectName("btnAbsen")
        self.verticalLayout.addWidget(self.btnAbsen)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem1)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Absen"))
        self.label.setText(_translate("Dialog", "TextLabel"))
        self.label_2.setText(_translate("Dialog", "TextLabel"))
        self.label_3.setText(_translate("Dialog", "Nama :"))
        self.btnAbsen.setText(_translate("Dialog", "Absen"))
    """
    def startAbsen(self):
        if len(self.txtNama.text()) > 0:
            self.nama = self.txtNama.text().upper()
            self.startVideo("0")

    def closeEvent(self, event):
        if not self.capture:
            print("Video not start")
        else:
            self.timer.stop()
            self.capture.release()

        print("dialog window ditutup...")

    def startVideo(self, cameraName):
        if len(cameraName) == 1:
        	self.capture = cv2.VideoCapture(int(cameraName))
        else:
        	self.capture = cv2.VideoCapture(cameraName)
        self.vtimer = QTimer(self)
        self.vtimer.timeout.connect(self.updateFrame)
        self.vtimer.start(40)

    def updateFrame(self):
        ret, self.image = self.capture.read()
        self.displayImage(self.image,False, 1)

    def faceRec(self, frame,crop):
        imgS = cv2.resize(frame,(0,0),None,0.25,0.25)
        imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)
        facelocframe = face_recognition.face_locations(imgS)

        for faceloc in facelocframe:
            top, right, bottom, left = faceloc
            top, right, bottom, left = top*4, right*4, bottom*4, left*4
            if crop:
                scale = 100
                tempimg = frame
                frame = tempimg[top-scale:bottom+scale, left-scale:right+scale]
                frame = np.require(frame, np.uint8, 'C')
            
            else:
                cv2.rectangle(frame,(faceloc[3]*4,faceloc[0]*4),(faceloc[1]*4,faceloc[2]*4),(0,255,0),2)

        return frame

    def displayImage(self, image, crop, window=1):
        image = cv2.resize(image, (640, 480))
        try:
            image = self.faceRec(image,crop)
            self.imcrop = image
        except Exception as e:
            print(e)
        
        qformat = QImage.Format_Indexed8
        if len(image.shape) == 3:
            if image.shape[2] == 4:
                qformat = QImage.Format_RGBA8888
            else:
                qformat = QImage.Format_RGB888
               
        outImage = QImage(image, image.shape[1], image.shape[0], image.strides[0], qformat)
        outImage = outImage.rgbSwapped()

        if window == 1:
            self.label.setPixmap(QPixmap.fromImage(outImage))
            self.label.setScaledContents(True)

    def showDatetime(self):
        self.labelTgl.setText(QDateTime.currentDateTime().toString('dd/MM/yyyy'))
        self.labelJam.setText(QDateTime.currentDateTime().toString('hh:mm:ss'))